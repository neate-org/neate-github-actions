name: "CD"
description: "Common workflow for deploying services"
inputs:
  charts:
    description: "Charts separated by spaces"
    required: true
    default: "dummy"
  images:
    description: "Images separated by spaces"
    required: true
    default: "neateas/image-name"
  environment:
    description: "Environment"
    required: true
    default: "prod"
  sections:
    description: "Dbm sections separated by spaces"
    required: true
    default: "service"
runs:
  using: "composite"
  runs-on: ubuntu-latest
  strategy:
    matrix:
      docker_channel:
        - stable
  steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
    - name: setup Docker
      uses: docker/setup-buildx-action@v2
      # uses: docker-practice/actions-setup-docker@master
      with:
        docker_channel: ${{ matrix.docker_channel }}
    - name: install kubectl
      uses: azure/setup-kubectl@v3
      id: install-kubectl
    - name: install helm
      uses: azure/setup-helm@v3
      id: install-helm
    - name: login to docker hub
      uses: docker/login-action@v1
      with:
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - uses: FranzDiebold/github-env-vars-action@v2
    - name: Set image tag
      shell: bash
      run: |
        if [[ "$CI_ACTION_REF_NAME_SLUG" == "master" || "$CI_ACTION_REF_NAME_SLUG" == "main" ]] ; then echo "IMAGE_TAG=$(echo 'latest')" >> $GITHUB_ENV; else echo "IMAGE_TAG=$(echo $CI_ACTION_REF_NAME_SLUG)" >> $GITHUB_ENV; fi
    - name: Print image tag
      shell: bash
      run: |
        echo "IMAGE_TAG=$IMAGE_TAG"

    - name: Install requirements
      shell: bash
      run: |
        pip install DockerBuildManagement

    - name: Publish
      shell: bash
      run: |
        dbm -build -publish ${{ inputs.sections }}

    - name: Deploy
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GIT_REPO_API_TOKEN }}
        script: |
          github.rest.actions.createWorkflowDispatch({
            owner: 'neate-org',
            repo: 'neate-k8s-deployment',
            workflow_id: 'cd.yml',
            ref: 'master',
            inputs: {
              charts: '${{ inputs.charts }}',
              images: '${{ inputs.images }}:'+process.env.IMAGE_TAG,
              environment: '${{ inputs.environment }}',
              slack: '${{ secrets.SLACK_WEBHOOK_URL }}',
            },
          })
